from datetime import datetime
from typing import Optional
from pydantic import BaseModel, EmailStr, Field
from .utils import generate_base62_id
# Pydantic Models
# Used for Request & Response validations


class PostBase(BaseModel):
    id: str = None
    title: Optional[str] = None
    content: Optional[str] = None
    published: Optional[bool] = None
    owner_id: Optional[bool] = None
    createdAt: Optional[datetime] = Field(default_factory=lambda: datetime.now())

# Generate New Unique ID
class PostCreate(PostBase):

    def __init__(self, **data):
        if 'id' not in data or data['id'] is None:
            data['id'] = generate_base62_id()
        super().__init__(**data)
    # createdAt field is not included in PostCreate because it is automatically generated by the database
    title: str
    content: str
    published: bool = True

class UserCreate(BaseModel):
    id: Optional[int] = None
    email: EmailStr
    createdAt: Optional[datetime] = None

class UserGet(BaseModel):
    id: int
    email: EmailStr
    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    id: int | None = None

class Like(BaseModel):
    post_id: str

class Post(PostBase):
    id: str
    createdAt: datetime
    owner_id: int
    owner: UserGet

    class Config:
        from_attributes = True

class PostOut(BaseModel):
    id: str | None
    title: str
    content: str
    published: bool | None
    createdAt: datetime | None
    owner_id: int | None
    likes: int | None
    class Config:
        from_attributes = True

