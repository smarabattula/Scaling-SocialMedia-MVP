from datetime import datetime
import random
from typing import Optional
from pydantic import BaseModel, EmailStr

# Pydantic Models
# Used for Request & Response validations

BASE62_ALPHABET = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'

def generate_base62_id(length=6):
    return ''.join(random.choices(BASE62_ALPHABET, k=length))

class PostBase(BaseModel):
    id: str = None
    title: Optional[str] = None
    content: Optional[str] = None
    published: Optional[bool] = None
    createdAt: Optional[datetime] = None

# Generate New Unique ID
class PostCreate(PostBase):
    id: str = None

    def __init__(self, **data):
        if 'id' not in data or data['id'] is None:
            data['id'] = generate_base62_id()
        super().__init__(**data)
    # createdAt field is not included in PostCreate because it is automatically generated by the database
    title: str
    content: str
    published: bool = True
    # createdAt auto created by database

class Post(PostBase):
    id: str
    createdAt: datetime
    owner_id: int
    owner: 'UserGet'
    class Config:
        from_attributes = True

class UserCreate(BaseModel):
    id: Optional[int] = None
    email: EmailStr
    createdAt: Optional[datetime] = None

class UserGet(BaseModel):
    id: int
    email: EmailStr
    class Config:
        from_attributes = True

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    id: int | None = None

